/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wpo_gui;

import java.awt.Dialog;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import static wpo_gui.Tool.log;
import static wpo_gui.Type.*;

/**
 *
 * @author Ja
 */
public class WPO_GUI extends javax.swing.JFrame {

    /**
     * Creates new form WPO
     */
    public WPO_GUI() {
        initComponents();
        fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("S:\\Dysk Google\\NetBeans\\WPO_GUI\\img"));

        plikWe1 = new PCXImage();
        plikWe2 = new PCXImage();
        plikWy = new PCXImage();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelPlikWe1 = new javax.swing.JLabel();
        labelPlikWe2 = new javax.swing.JLabel();
        labelPlikWy = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonShowImg1 = new javax.swing.JButton();
        buttonShowImg2 = new javax.swing.JButton();
        buttonShowImgOutput = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuSelectInputFile1 = new javax.swing.JMenuItem();
        menuSelectInputFile2 = new javax.swing.JMenuItem();
        menuSelectOutputFile = new javax.swing.JMenuItem();
        menuClose = new javax.swing.JMenuItem();
        menuArithmeticOperations = new javax.swing.JMenu();
        menuAddConstantToImage = new javax.swing.JMenuItem();
        menuAddImages = new javax.swing.JMenuItem();
        menuMultiplyImageByNumber = new javax.swing.JMenuItem();
        menuMultiplyImages = new javax.swing.JMenuItem();
        menuMixImages = new javax.swing.JMenuItem();
        menuPowerImage = new javax.swing.JMenuItem();
        menuDivideImageByNumber = new javax.swing.JMenuItem();
        menuDivideImages = new javax.swing.JMenuItem();
        menuRootImage = new javax.swing.JMenuItem();
        menuGeometricOperations = new javax.swing.JMenu();
        menuMoveImageByVector = new javax.swing.JMenuItem();
        menuScaleImage = new javax.swing.JMenuItem();
        menuRotateImage = new javax.swing.JMenuItem();
        menuHorizontalSymmetry = new javax.swing.JMenuItem();
        menuVerticalSymmetry = new javax.swing.JMenuItem();
        menuCutImageFragment = new javax.swing.JMenuItem();
        menuCopyImageFragment = new javax.swing.JMenuItem();
        menuHistogramOperations = new javax.swing.JMenu();
        menuCountHistogram = new javax.swing.JMenuItem();
        menuMoveHistogram = new javax.swing.JMenuItem();
        menuStretchHistogram = new javax.swing.JMenuItem();
        menuThresholding1Threshold = new javax.swing.JMenuItem();
        menuMorphologicalOperations = new javax.swing.JMenu();
        menuErodeImage = new javax.swing.JMenuItem();
        menuDilateImage = new javax.swing.JMenuItem();
        menuImageOpening = new javax.swing.JMenuItem();
        menuImageClosing = new javax.swing.JMenuItem();
        menuFiltering = new javax.swing.JMenu();
        menuLowPassFilter = new javax.swing.JMenuItem();
        menuHighPassFilterRoberts = new javax.swing.JMenuItem();
        menuHighPassFilterPrewitt = new javax.swing.JMenuItem();
        menuHighPassFilterSobel = new javax.swing.JMenuItem();
        menuFilterCompassGradient = new javax.swing.JMenuItem();
        menuMedianFilter = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Wprowadzenie do Przetwarzania Obrazów ");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        labelPlikWe1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelPlikWe1.setText("[Nie wybrano]");

        labelPlikWe2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelPlikWe2.setText("[Nie wybrano]");

        labelPlikWy.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelPlikWy.setText("output.pcx");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Plik wejściowy 1:");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Plik wejściowy 2:");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Plik wyjściowy:");

        buttonShowImg1.setText("Otwórz");
        buttonShowImg1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShowImg1ActionPerformed(evt);
            }
        });

        buttonShowImg2.setText("Otwórz");
        buttonShowImg2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShowImg2ActionPerformed(evt);
            }
        });

        buttonShowImgOutput.setText("Otwórz");
        buttonShowImgOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShowImgOutputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPlikWe1)
                    .addComponent(labelPlikWe2)
                    .addComponent(labelPlikWy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonShowImg1)
                    .addComponent(buttonShowImg2)
                    .addComponent(buttonShowImgOutput))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonShowImg1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonShowImg2)
                            .addComponent(labelPlikWe2)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPlikWe1)
                            .addComponent(jLabel1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonShowImgOutput)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(labelPlikWy)))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jButton1.setText("TEST1: load sample Gray images");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("TEST2: load sample RGB images");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("TEST3: load sample MONO images");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("TEST4: przepisz we1 na wyjście");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        menuFile.setText("Plik");

        menuSelectInputFile1.setText("Wybierz plik wejściowy 1");
        menuSelectInputFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSelectInputFile1ActionPerformed(evt);
            }
        });
        menuFile.add(menuSelectInputFile1);

        menuSelectInputFile2.setText("Wybierz plik wejściowy 2");
        menuSelectInputFile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSelectInputFile2ActionPerformed(evt);
            }
        });
        menuFile.add(menuSelectInputFile2);

        menuSelectOutputFile.setText("Wybierz plik wyjściowy");
        menuSelectOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSelectOutputFileActionPerformed(evt);
            }
        });
        menuFile.add(menuSelectOutputFile);

        menuClose.setText("Zamknij");
        menuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCloseActionPerformed(evt);
            }
        });
        menuFile.add(menuClose);

        menuBar.add(menuFile);

        menuArithmeticOperations.setText("Operacje arytmetyczne");

        menuAddConstantToImage.setText("sumowanie stałej z obrazem");
        menuAddConstantToImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddConstantToImageActionPerformed(evt);
            }
        });
        menuArithmeticOperations.add(menuAddConstantToImage);

        menuAddImages.setText("sumowanie 2 obrazów");
        menuAddImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddImagesActionPerformed(evt);
            }
        });
        menuArithmeticOperations.add(menuAddImages);

        menuMultiplyImageByNumber.setText("mnożenie obrazu przez liczbę");
        menuMultiplyImageByNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMultiplyImageByNumberActionPerformed(evt);
            }
        });
        menuArithmeticOperations.add(menuMultiplyImageByNumber);

        menuMultiplyImages.setText("mnożenie 2 obrazów");
        menuMultiplyImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMultiplyImagesActionPerformed(evt);
            }
        });
        menuArithmeticOperations.add(menuMultiplyImages);

        menuMixImages.setText("mieszanie 2 obrazów");
        menuMixImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMixImagesActionPerformed(evt);
            }
        });
        menuArithmeticOperations.add(menuMixImages);

        menuPowerImage.setText("potęgowanie obrazu");
        menuPowerImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPowerImageActionPerformed(evt);
            }
        });
        menuArithmeticOperations.add(menuPowerImage);

        menuDivideImageByNumber.setText("dzielenie obrazu przez liczbę");
        menuDivideImageByNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDivideImageByNumberActionPerformed(evt);
            }
        });
        menuArithmeticOperations.add(menuDivideImageByNumber);

        menuDivideImages.setText("dzielenie 2 obrazów");
        menuDivideImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDivideImagesActionPerformed(evt);
            }
        });
        menuArithmeticOperations.add(menuDivideImages);

        menuRootImage.setText("pierwiastek kwadratowy z obrazu");
        menuRootImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRootImageActionPerformed(evt);
            }
        });
        menuArithmeticOperations.add(menuRootImage);

        menuBar.add(menuArithmeticOperations);

        menuGeometricOperations.setText("Operacje geometryczne");

        menuMoveImageByVector.setText("przemieszczanie orbazu o wektor");
        menuMoveImageByVector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMoveImageByVectorActionPerformed(evt);
            }
        });
        menuGeometricOperations.add(menuMoveImageByVector);

        menuScaleImage.setText("skalowanie jednorodne i niejednorodne");
        menuScaleImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuScaleImageActionPerformed(evt);
            }
        });
        menuGeometricOperations.add(menuScaleImage);

        menuRotateImage.setText("obracanie obrazu o kąt");
        menuRotateImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRotateImageActionPerformed(evt);
            }
        });
        menuGeometricOperations.add(menuRotateImage);

        menuHorizontalSymmetry.setText("symetria w poziomie");
        menuHorizontalSymmetry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHorizontalSymmetryActionPerformed(evt);
            }
        });
        menuGeometricOperations.add(menuHorizontalSymmetry);

        menuVerticalSymmetry.setText("symteria w pionie");
        menuVerticalSymmetry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVerticalSymmetryActionPerformed(evt);
            }
        });
        menuGeometricOperations.add(menuVerticalSymmetry);

        menuCutImageFragment.setText("wycinanie fragmentu obrazu");
        menuCutImageFragment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCutImageFragmentActionPerformed(evt);
            }
        });
        menuGeometricOperations.add(menuCutImageFragment);

        menuCopyImageFragment.setText("kopiowanie fragmentu obrazu");
        menuCopyImageFragment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCopyImageFragmentActionPerformed(evt);
            }
        });
        menuGeometricOperations.add(menuCopyImageFragment);

        menuBar.add(menuGeometricOperations);

        menuHistogramOperations.setText("Operacje na histogramie");

        menuCountHistogram.setText("oblicz histogram");
        menuCountHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCountHistogramActionPerformed(evt);
            }
        });
        menuHistogramOperations.add(menuCountHistogram);

        menuMoveHistogram.setText("przemieszczanie histogramu");
        menuMoveHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMoveHistogramActionPerformed(evt);
            }
        });
        menuHistogramOperations.add(menuMoveHistogram);

        menuStretchHistogram.setText("rozciąganie histogramu");
        menuStretchHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuStretchHistogramActionPerformed(evt);
            }
        });
        menuHistogramOperations.add(menuStretchHistogram);

        menuThresholding1Threshold.setText("progowanie 1-progrowe");
        menuThresholding1Threshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuThresholding1ThresholdActionPerformed(evt);
            }
        });
        menuHistogramOperations.add(menuThresholding1Threshold);

        menuBar.add(menuHistogramOperations);

        menuMorphologicalOperations.setText("Operacje morfologiczne");

        menuErodeImage.setText("okrawanie (erozja)");
        menuErodeImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuErodeImageActionPerformed(evt);
            }
        });
        menuMorphologicalOperations.add(menuErodeImage);

        menuDilateImage.setText("nakładanie (dylatacja)");
        menuDilateImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDilateImageActionPerformed(evt);
            }
        });
        menuMorphologicalOperations.add(menuDilateImage);

        menuImageOpening.setText("otwarcie");
        menuImageOpening.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImageOpeningActionPerformed(evt);
            }
        });
        menuMorphologicalOperations.add(menuImageOpening);

        menuImageClosing.setText("zamknięcie");
        menuImageClosing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImageClosingActionPerformed(evt);
            }
        });
        menuMorphologicalOperations.add(menuImageClosing);

        menuBar.add(menuMorphologicalOperations);

        menuFiltering.setText("Filtrowanie");

        menuLowPassFilter.setText("dolnoprzepustowe");
        menuLowPassFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLowPassFilterActionPerformed(evt);
            }
        });
        menuFiltering.add(menuLowPassFilter);

        menuHighPassFilterRoberts.setText("górnoprzepustowe Robertsa");
        menuHighPassFilterRoberts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHighPassFilterRobertsActionPerformed(evt);
            }
        });
        menuFiltering.add(menuHighPassFilterRoberts);

        menuHighPassFilterPrewitt.setText("górnoprzepustowe Prewitta");
        menuHighPassFilterPrewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHighPassFilterPrewittActionPerformed(evt);
            }
        });
        menuFiltering.add(menuHighPassFilterPrewitt);

        menuHighPassFilterSobel.setText("górnoprzepustowe Sobela");
        menuHighPassFilterSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHighPassFilterSobelActionPerformed(evt);
            }
        });
        menuFiltering.add(menuHighPassFilterSobel);

        menuFilterCompassGradient.setText("gradientowe kompasowe");
        menuFilterCompassGradient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFilterCompassGradientActionPerformed(evt);
            }
        });
        menuFiltering.add(menuFilterCompassGradient);

        menuMedianFilter.setText("medianowe");
        menuMedianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMedianFilterActionPerformed(evt);
            }
        });
        menuFiltering.add(menuMedianFilter);

        menuBar.add(menuFiltering);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap(433, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(332, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCloseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuCloseActionPerformed

    private void menuSelectInputFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSelectInputFile1ActionPerformed
        int r = fileChooser.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                plikWe1.openFile(file.getAbsolutePath());
            } catch (Exception e) {
                //System.out.println("Problem dostępu do pliku!");
                e.printStackTrace();
            }
            labelPlikWe1.setText(file.getAbsolutePath());
        } else {
            System.out.println("Anulowano przez użytkownika");
        }
    }//GEN-LAST:event_menuSelectInputFile1ActionPerformed

    private void menuScaleImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuScaleImageActionPerformed
        double sX = Dialogs.askForDouble(this, "Skalowanie obrazu", "Podaj x: ");
        double sY = Dialogs.askForDouble(this, "Skalowanie obrazu", "Podaj y: ");

        try {
            plikWy = GeometricOperations.scaleImage(plikWe1, sX, sY);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuScaleImageActionPerformed

    private void menuHighPassFilterRobertsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHighPassFilterRobertsActionPerformed
        int[] matrix = {0, 0, 0, -1, 0, 0, 0, 1, 0};
        try {
            plikWy = Filtering.filter(plikWe1, matrix);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuHighPassFilterRobertsActionPerformed

    private void menuSelectInputFile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSelectInputFile2ActionPerformed
        int r = fileChooser.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                plikWe2.openFile(file.getAbsolutePath());
            } catch (Exception e) {
                e.printStackTrace();
            }
            labelPlikWe2.setText(file.getAbsolutePath());
        } else {
            System.out.println("Anulowano przez użytkownika");
        }
//        try {
//            plikWe1.saveRawDecodedImageBytes("we2.raw");
//        } catch (Exception ex) {
//            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_menuSelectInputFile2ActionPerformed

    private void menuSelectOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSelectOutputFileActionPerformed
        int r = fileChooser.showSaveDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            labelPlikWy.setText(file.getAbsolutePath());
        } 
    }//GEN-LAST:event_menuSelectOutputFileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String filename1 = "S:\\Dysk Google\\NetBeans\\WPO_GUI\\img\\gray\\" + EXAMPLE1;
        String filename2 = "S:\\Dysk Google\\NetBeans\\WPO_GUI\\img\\gray\\" + EXAMPLE2;
        String filenameOut = "S:\\Dysk Google\\NetBeans\\WPO_GUI\\img\\output.pcx";

        try {
            plikWe1.openFile(filename1);
            labelPlikWe1.setText(filename1);
            Tool.saveRawDecodedImageBytes(plikWe1, "we1.raw");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //zapisz tekstowo
        try {
            PCXImage.writePixelsMatrixToTextFile(new PixelsMatrix(plikWe1.getDecodedImageBytes(), plikWe1.getWidth(), plikWe1.getHeight(), plikWe1.getType()), "input1.txt");
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            plikWe2.openFile(filename2);
            labelPlikWe2.setText(filename2);
            Tool.saveRawDecodedImageBytes(plikWe2, "we2.raw");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //zapisz tekstowo
        try {
            PCXImage.writePixelsMatrixToTextFile(new PixelsMatrix(plikWe2.getDecodedImageBytes(), plikWe2.getWidth(), plikWe2.getHeight(), plikWe2.getType()), "input2.txt");
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        plikWy = new PCXImage(plikWe1);
        labelPlikWy.setText(filenameOut);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void menuAddConstantToImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddConstantToImageActionPerformed
        double d = Dialogs.askForDouble(this, "Dodawanie stałej do obrazu", "Podaj stałą: ");

        try {
            plikWy = ArithmeticOperations.addValueToImage(plikWe1, d);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuAddConstantToImageActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void menuAddImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddImagesActionPerformed
        PCXImage.compareImages(plikWe1, plikWe2);

        try {
            plikWy = ArithmeticOperations.addImages(plikWe1, plikWe2);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuAddImagesActionPerformed

    private void menuMultiplyImageByNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMultiplyImageByNumberActionPerformed
        double d = Dialogs.askForDouble(this, "Mnożenie obrazu przez liczbę", "Podaj mnożnik: ");

        try {
            plikWy = ArithmeticOperations.multiplyImageByValue(plikWe1, d);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuMultiplyImageByNumberActionPerformed

    private void menuMultiplyImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMultiplyImagesActionPerformed
        PCXImage.compareImages(plikWe1, plikWe2);

        try {
            plikWy = ArithmeticOperations.multiplyImages(plikWe1, plikWe2);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuMultiplyImagesActionPerformed

    private void menuMixImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMixImagesActionPerformed
        PCXImage.compareImages(plikWe1, plikWe2);
        double d = Dialogs.askForDouble(this, "Mieszanie obrazów z określonym współczynnikiem", "Podaj współczynnik: ");

        try {
            plikWy = ArithmeticOperations.mixImages(plikWe1, plikWe2, d);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuMixImagesActionPerformed

    private void menuPowerImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPowerImageActionPerformed
        double d = Dialogs.askForDouble(this, "Potęgowanie obrazu", "Podaj wykładnik: ");

        try {
            plikWy = ArithmeticOperations.powerImageByValue(plikWe1, d);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuPowerImageActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String filename1 = "S:\\Dysk Google\\NetBeans\\WPO_GUI\\img\\rgb\\" + EXAMPLE1;
        String filename2 = "S:\\Dysk Google\\NetBeans\\WPO_GUI\\img\\rgb\\" + EXAMPLE2;
        String filenameOut = "S:\\Dysk Google\\NetBeans\\WPO_GUI\\img\\output.pcx";

        try {
            plikWe1.openFile(filename1);
            labelPlikWe1.setText(filename1);
            //Tool.saveRawDecodedImageBytes(plikWe1, "we1.raw");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            plikWe2.openFile(filename2);
            labelPlikWe2.setText(filename2);
            //Tool.saveRawDecodedImageBytes(plikWe2, "we2.raw");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        plikWy = new PCXImage(plikWe1);
        labelPlikWy.setText(filenameOut);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void menuMoveImageByVectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMoveImageByVectorActionPerformed
        int x = Dialogs.askForInt(this, "Przesuwanie obrazu o wektor", "Podaj x: ");
        int y = Dialogs.askForInt(this, "Przesuwanie obrazu o wektor", "Podaj y: ");

        try {
            plikWy = GeometricOperations.moveImageByVector(plikWe1, x, y);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuMoveImageByVectorActionPerformed

    private void menuRotateImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRotateImageActionPerformed
        int angle = Dialogs.askForInt(this, "Obracanie obrazu o kąt", "Podaj kąt: ");

        plikWy = GeometricOperations.rotateImage(plikWe1, angle);

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuRotateImageActionPerformed

    private void menuCountHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCountHistogramActionPerformed
        try {
            Histogram.countHistogram(plikWe1);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

//        String s = Dialogs.askForString(this, "Zapis pliku histogramu do pliku", "Podaj ścieżkę i nazwe pliku, do którego chcesz zapisać histogram.");
//        if (s == null) {
//            return;
//        }
        // s += ".txt";  //dodaj rozszerzenie txt
        Path p = Paths.get(plikWe1.getFilename());

        try {
            //Histogram.saveHistogramToTextFile(s, plikWe1.getType());
            Histogram.saveHistogramToTextFile("histogram\\"+p.getFileName().toString(), plikWe1.getType());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_menuCountHistogramActionPerformed

    private void menuMoveHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMoveHistogramActionPerformed
        plikWy = Histogram.moveHistogram(plikWe1);

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_menuMoveHistogramActionPerformed

    private void menuStretchHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuStretchHistogramActionPerformed
        try {
            plikWy = Histogram.stretchHistogram(plikWe1);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuStretchHistogramActionPerformed

    private void menuThresholding1ThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuThresholding1ThresholdActionPerformed
        plikWy = Histogram.thresholding1threshold(plikWe1);

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_menuThresholding1ThresholdActionPerformed

    private void menuErodeImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuErodeImageActionPerformed
        switch (plikWe1.getType()) {
            case MONOB:
            case GRAY8: {
                try {
                    plikWy = MorphologicOperations.erodeImage(plikWe1);
                } catch (Exception ex) {
                    Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            break;
            default:
                Dialogs.Error(this, "Operacja nie została zdefiniowana dla plików innych niż bianerne i szare!");
                break;
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuErodeImageActionPerformed

    private void menuDilateImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDilateImageActionPerformed
        if (plikWe1.getType() != MONOB && plikWe1.getType() != GRAY8) {
            Dialogs.Error(this, "Operacja zdefiniowana tylko dla obrazów mono i szarych!");
            return;
        }

        try {
            plikWy = MorphologicOperations.dylateImage(plikWe1);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuDilateImageActionPerformed

    private void menuLowPassFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLowPassFilterActionPerformed
        int[] matrix = {1, 1, 1, 1, 1, 1, 1, 1, 1};
        try {
            plikWy = Filtering.filter(plikWe1, matrix);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuLowPassFilterActionPerformed

    private void menuDivideImageByNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDivideImageByNumberActionPerformed
        double d = Dialogs.askForDouble(this, "Dzielenie obrazu przez liczbę", "Podaj dzielnik: ");

        try {
            plikWy = ArithmeticOperations.divideImageByNumber(plikWe1, d);
            if (plikWy == null) {
                Tool.error("plikWy=null");
            }
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuDivideImageByNumberActionPerformed

    private void menuDivideImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDivideImagesActionPerformed
        try {
            plikWy = ArithmeticOperations.divideImages(plikWe1, plikWe2);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuDivideImagesActionPerformed

    private void menuRootImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRootImageActionPerformed
        try {
            plikWy = ArithmeticOperations.rootImage(plikWe1);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuRootImageActionPerformed

    private void buttonShowImgOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShowImgOutputActionPerformed
        try {
            plikWy.runFile();
        } catch (IOException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonShowImgOutputActionPerformed

    private void buttonShowImg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShowImg1ActionPerformed

        try {
            plikWe1.runFile();
        } catch (IOException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonShowImg1ActionPerformed

    private void buttonShowImg2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShowImg2ActionPerformed

        try {
            plikWe2.runFile();
        } catch (IOException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonShowImg2ActionPerformed

    private void menuImageOpeningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImageOpeningActionPerformed
        //erozja + dylatacja
        PCXImage plikTmp = null;
        try {
            plikTmp = MorphologicOperations.erodeImage(plikWe1);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            plikWy = MorphologicOperations.dylateImage(plikTmp);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuImageOpeningActionPerformed

    private void menuImageClosingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImageClosingActionPerformed
        // dylatacja+erozja
        PCXImage plikTmp = null;

        try {
            plikTmp = MorphologicOperations.dylateImage(plikWe1);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            plikWy = MorphologicOperations.erodeImage(plikTmp);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuImageClosingActionPerformed

    private void menuHighPassFilterPrewittActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHighPassFilterPrewittActionPerformed
        int[] matrix = {-1, -1, -1, 0, 0, 0, 1, 1, 1};
        try {
            plikWy = Filtering.filter(plikWe1, matrix);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuHighPassFilterPrewittActionPerformed

    private void menuHighPassFilterSobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHighPassFilterSobelActionPerformed
        int[] matrix = {-1, -2, -1, 0, 0, 0, 1, 2, 1};
        try {
            plikWy = Filtering.filter(plikWe1, matrix);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuHighPassFilterSobelActionPerformed

    private void menuFilterCompassGradientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFilterCompassGradientActionPerformed
        String s = Dialogs.askForString(this, "Kierunek filtra", "Podaj kierunek (np. N: północny, NE: północno-wschodni");
        int[] matrix;
        switch (s) {
            case "E":
                matrix = new int[]{-1, 1, 1, -1, -2, 1, -1, 1, 1};
                break;
            case "SE":
                matrix = new int[]{-1, -1, 1, -1, -2, 1, 1, 1, 1};
                break;
            case "S":
                matrix = new int[]{-1, -1, -1, 1, -2, 1, 1, 1, 1};
                break;
            case "SW":
                matrix = new int[]{1, -1, -1, 1, -2, -1, 1, 1, 1};
                break;
            case "W":
                matrix = new int[]{1, 1, -1, 1, -2, 1, 1, 1, -1};
                break;
            case "NW":
                matrix = new int[]{1, 1, 1, 1, -2, 1, 1, -1, -1};
                break;
            case "N":
                matrix = new int[]{1, 1, 1, 1, -2, 1, -1, -1, -1};
                break;
            case "NE":
                matrix = new int[]{1, 1, 1, -1, -2, 1, -1, -1, 1};
                break;
            default: {
                Dialogs.Error(this, "Nieprawidłowy kierunek! Kierunki: E, SE, S, SW, W, NW, N, NE");
                return;
            }
        }
        try {
            plikWy = Filtering.filter(plikWe1, matrix);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_menuFilterCompassGradientActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String filename1 = "S:\\Dysk Google\\NetBeans\\WPO_GUI\\img\\mono\\" + EXAMPLE1;
        String filename2 = "S:\\Dysk Google\\NetBeans\\WPO_GUI\\img\\mono\\" + EXAMPLE2;
        String filenameOut = "S:\\Dysk Google\\NetBeans\\WPO_GUI\\img\\output.pcx";

        try {
            plikWe1.openFile(filename1);
            labelPlikWe1.setText(filename1);
            //Tool.saveRawDecodedImageBytes(plikWe1, "we1.raw");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            plikWe2.openFile(filename2);
            labelPlikWe2.setText(filename2);
            //Tool.saveRawDecodedImageBytes(plikWe2, "we2.raw");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        plikWy = new PCXImage(plikWe1);
        labelPlikWy.setText(filenameOut);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            plikWe1.openFile(labelPlikWe1.getText());
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        plikWy = new PCXImage(plikWe1.getDecodedImageBytes(), plikWe1);
        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void menuMedianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMedianFilterActionPerformed
        try {
            plikWy = new PCXImage(Filtering.medianFilter(plikWe1));
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuMedianFilterActionPerformed

    private void menuCutImageFragmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCutImageFragmentActionPerformed
        int x1 = Dialogs.askForInt(this, "Wycinanie fragmentu obrazu", "Podaj współrzędną x1:");
        int y1 = Dialogs.askForInt(this, "Wycinanie fragmentu obrazu", "Podaj współrzędną y1:");
        int x2 = Dialogs.askForInt(this, "Wycinanie fragmentu obrazu", "Podaj współrzędną x2:");
        int y2 = Dialogs.askForInt(this, "Wycinanie fragmentu obrazu", "Podaj współrzędną y2:");

        try {
            plikWy = new PCXImage(GeometricOperations.cutImageFragment(plikWe1, x1, y1, x2, y2));
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuCutImageFragmentActionPerformed

    private void menuCopyImageFragmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCopyImageFragmentActionPerformed
        int x1 = Dialogs.askForInt(this, "Kopiowanie fragmentu obrazu", "Podaj współrzędną x1:");
        int y1 = Dialogs.askForInt(this, "Kopiowanie fragmentu obrazu", "Podaj współrzędną y1:");
        int x2 = Dialogs.askForInt(this, "Kopiowanie fragmentu obrazu", "Podaj współrzędną x2:");
        int y2 = Dialogs.askForInt(this, "Kopiowanie fragmentu obrazu", "Podaj współrzędną y2:");

        try {
            plikWy = new PCXImage(GeometricOperations.copyImageFragment(plikWe1, x1, y1, x2, y2));
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuCopyImageFragmentActionPerformed

    private void menuHorizontalSymmetryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHorizontalSymmetryActionPerformed
        try {
            //symetria w poziomie
            plikWy = new PCXImage(GeometricOperations.horizontalSymmetry(plikWe1));
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuHorizontalSymmetryActionPerformed

    private void menuVerticalSymmetryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVerticalSymmetryActionPerformed
        try {
            //symetria w pionie
            plikWy = new PCXImage(GeometricOperations.verticalSymmetry(plikWe1));
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            saveImage(plikWy, true);
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuVerticalSymmetryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WPO_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WPO_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WPO_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WPO_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WPO_GUI().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonShowImg1;
    private javax.swing.JButton buttonShowImg2;
    private javax.swing.JButton buttonShowImgOutput;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelPlikWe1;
    private javax.swing.JLabel labelPlikWe2;
    private javax.swing.JLabel labelPlikWy;
    private javax.swing.JMenuItem menuAddConstantToImage;
    private javax.swing.JMenuItem menuAddImages;
    private javax.swing.JMenu menuArithmeticOperations;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuClose;
    private javax.swing.JMenuItem menuCopyImageFragment;
    private javax.swing.JMenuItem menuCountHistogram;
    private javax.swing.JMenuItem menuCutImageFragment;
    private javax.swing.JMenuItem menuDilateImage;
    private javax.swing.JMenuItem menuDivideImageByNumber;
    private javax.swing.JMenuItem menuDivideImages;
    private javax.swing.JMenuItem menuErodeImage;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFilterCompassGradient;
    private javax.swing.JMenu menuFiltering;
    private javax.swing.JMenu menuGeometricOperations;
    private javax.swing.JMenuItem menuHighPassFilterPrewitt;
    private javax.swing.JMenuItem menuHighPassFilterRoberts;
    private javax.swing.JMenuItem menuHighPassFilterSobel;
    private javax.swing.JMenu menuHistogramOperations;
    private javax.swing.JMenuItem menuHorizontalSymmetry;
    private javax.swing.JMenuItem menuImageClosing;
    private javax.swing.JMenuItem menuImageOpening;
    private javax.swing.JMenuItem menuLowPassFilter;
    private javax.swing.JMenuItem menuMedianFilter;
    private javax.swing.JMenuItem menuMixImages;
    private javax.swing.JMenu menuMorphologicalOperations;
    private javax.swing.JMenuItem menuMoveHistogram;
    private javax.swing.JMenuItem menuMoveImageByVector;
    private javax.swing.JMenuItem menuMultiplyImageByNumber;
    private javax.swing.JMenuItem menuMultiplyImages;
    private javax.swing.JMenuItem menuPowerImage;
    private javax.swing.JMenuItem menuRootImage;
    private javax.swing.JMenuItem menuRotateImage;
    private javax.swing.JMenuItem menuScaleImage;
    private javax.swing.JMenuItem menuSelectInputFile1;
    private javax.swing.JMenuItem menuSelectInputFile2;
    private javax.swing.JMenuItem menuSelectOutputFile;
    private javax.swing.JMenuItem menuStretchHistogram;
    private javax.swing.JMenuItem menuThresholding1Threshold;
    private javax.swing.JMenuItem menuVerticalSymmetry;
    // End of variables declaration//GEN-END:variables
    private JFileChooser fileChooser;
    private PCXImage plikWe1;
    private PCXImage plikWe2;
    private PCXImage plikWy;
    private static final String EXAMPLE1 = "parasole.pcx";
    private static final String EXAMPLE2 = "oko-kameleona.pcx";

    private void saveImage(PCXImage plikWy, boolean doNormalization) throws Exception {
        log("plikWy przed normalizacja: fMin="+PCXImage.findMin(plikWy.getDecodedImageBytes())+", fMax="+PCXImage.findMax(plikWy.getDecodedImageBytes()));
        if(doNormalization){
            plikWy.setDecodedImageBytes( PCXImage.normalize(plikWy.getDecodedImageBytes(), plikWy.getWidth(), plikWy.getHeight(), plikWy.getType()) );
        }
        log("plikWy po normalizacji: fMin="+PCXImage.findMin(plikWy.getDecodedImageBytes())+", fMax="+PCXImage.findMax(plikWy.getDecodedImageBytes()));
        
       
        //Zapisz zmieniony obraz
        try {
            plikWy.saveFile(labelPlikWy.getText());
        } catch (Exception ex) {
            Logger.getLogger(WPO_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //zapisz do txt
        PCXImage.writePixelsMatrixToTextFile(new PixelsMatrix(plikWy.getDecodedImageBytes(), plikWy.getWidth(), plikWy.getHeight(), plikWy.getType()), "output.txt");
        
    }

}
